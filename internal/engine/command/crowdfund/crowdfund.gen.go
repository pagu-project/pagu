// Code generated by command-generator. DO NOT EDIT.
package crowdfund

import (
	"github.com/pagu-project/pagu/internal/engine/command"
	"github.com/pagu-project/pagu/internal/entity"
)

var subCmdCreate *command.Command
var subCmdDisable *command.Command
var subCmdReport *command.Command
var subCmdInfo *command.Command
var subCmdPurchase *command.Command
var subCmdClaim *command.Command

func (c *CrowdfundCmd) crowdfundCommand() *command.Command {
	crowdfundCmd := &command.Command{
		Name:        "crowdfund",
		Help:        "Commands for managing crowdfunding campaigns",
		AppIDs:      entity.AllAppIDs(),
		TargetFlag:  command.TargetMaskAll,
		SubCommands: make([]*command.Command, 0),
	}

	subCmdCreate = &command.Command{
		Name:           "create",
		Help:           "Create a new crowdfunding campaign",
		Handler:        c.createHandler,
		ResultTemplate: `Crowdfund campaign '{{.campaign.Title}}' created successfully with {{ .campaign.Packages | len }} packages`,
		AppIDs:         entity.AllAppIDs(),
		TargetFlag:     command.TargetMaskAll,
		Args: []command.Args{
			{
				Name:     "title",
				Desc:     "The title of this crowdfunding campaign",
				InputBox: command.InputBoxText,
				Optional: false,
			},
			{
				Name:     "desc",
				Desc:     "A description of this crowdfunding campaign",
				InputBox: command.InputBoxMultilineText,
				Optional: false,
			},
			{
				Name:     "packages",
				Desc:     "The packages for this campaign in JSON format",
				InputBox: command.InputBoxMultilineText,
				Optional: false,
			},
		},
	}
	subCmdDisable = &command.Command{
		Name:           "disable",
		Help:           "Disable an existing crowdfunding campaign",
		Handler:        c.disableHandler,
		ResultTemplate: ``,
		AppIDs:         entity.AllAppIDs(),
		TargetFlag:     command.TargetMaskAll,
	}
	subCmdReport = &command.Command{
		Name:           "report",
		Help:           "View reports of a crowdfunding campaign",
		Handler:        c.reportHandler,
		ResultTemplate: ``,
		AppIDs:         entity.AllAppIDs(),
		TargetFlag:     command.TargetMaskAll,
	}
	subCmdInfo = &command.Command{
		Name:           "info",
		Help:           "Get detailed information about a crowdfunding campaign",
		Handler:        c.infoHandler,
		ResultTemplate: `**{{.campaign.Title}}**
{{.campaign.Desc}}

Packages:
{{range .campaign.Packages}}
- {{.Name}}
{{- end}}`,
		AppIDs:         entity.AllAppIDs(),
		TargetFlag:     command.TargetMaskAll,
	}
	subCmdPurchase = &command.Command{
		Name:           "purchase",
		Help:           "Make a purchase in a crowdfunding campaign",
		Handler:        c.purchaseHandler,
		ResultTemplate: ``,
		AppIDs:         entity.AllAppIDs(),
		TargetFlag:     command.TargetMaskAll,
		Args: []command.Args{
			{
				Name:     "package",
				Desc:     "Select the crowdfunding package",
				InputBox: command.InputBoxChoice,
				Optional: false,
			},
		},
	}
	subCmdClaim = &command.Command{
		Name:           "claim",
		Help:           "Claim packages from a crowdfunding campaign",
		Handler:        c.claimHandler,
		ResultTemplate: ``,
		AppIDs:         entity.AllAppIDs(),
		TargetFlag:     command.TargetMaskAll,
	}
	crowdfundCmd.AddSubCommand(subCmdCreate)
	crowdfundCmd.AddSubCommand(subCmdDisable)
	crowdfundCmd.AddSubCommand(subCmdReport)
	crowdfundCmd.AddSubCommand(subCmdInfo)
	crowdfundCmd.AddSubCommand(subCmdPurchase)
	crowdfundCmd.AddSubCommand(subCmdClaim)

	return crowdfundCmd
}
