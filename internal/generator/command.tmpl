// Code generated by command-generator. DO NOT EDIT.
package {{.Name}}

import (
	"github.com/pagu-project/pagu/internal/engine/command"
	"github.com/pagu-project/pagu/internal/entity"
)
{{ range .SubCommands}}
{{- $subCmdName := .Name }}
{{- range .Args}}
const argName{{$subCmdName | title}}{{.Name | title}} = "{{.Name}}"
{{- end}}
{{- end}}

type {{.Name}}SubCmds struct {
{{- range .SubCommands}}
	subCmd{{.Name | title}} *command.Command
{{- end}}
}

func (c *{{.Name | title}}Cmd) buildSubCmds() *{{.Name}}SubCmds {
{{- range .SubCommands }}
	subCmd{{.Name | title}} := &command.Command{
		Name:           "{{.Name}}",
		Help:           "{{.Help}}",
		Handler:        c.{{.Name | handlerName}}Handler,
		ResultTemplate: {{.ResultTemplate | quoted}},
		{{- if .TargetBotIDs }}
		TargetBotIDs: []entity.BotID{
			{{- range .TargetBotIDs }}
			entity.BotID_{{ . | botIDName }},
			{{- end }}
		},
		{{- else }}
		TargetBotIDs: entity.AllBotIDs(),
		{{- end }}
		{{- if .Args }}
		Args: []*command.Args{
			{{- range .Args}}
			{
				Name:     "{{.Name}}",
				Desc:     "{{.Desc}}",
				InputBox: command.InputBox{{.InputBox | string}},
				Optional: {{.Optional}},
				{{- if .Choices }}
				Choices: []command.Choice{
					{{- range .Choices }}
					{
						Name: {{.Name}},
						Value: {{.Value}},
					}
					{{- end}}
				}
				{{- end}}
			},
			{{- end }}
		},
		{{- end }}
	}
{{- end }}

	return &{{.Name}}SubCmds{
{{- $cmdName := .Name }}
{{- range .SubCommands }}
		subCmd{{.Name | title}}: subCmd{{.Name | title}},
{{- end}}
	}
}

func (c *{{.Name | title}}Cmd) build{{.Name | title}}Command() *command.Command {
	{{.Name}}Cmd := &command.Command{
		{{- if .Emoji }}
		Emoji:          "{{.Emoji}}",
		{{- end }}
		Name:        "{{.Name}}",
		Help:        "{{.Help}}",
		SubCommands: make([]*command.Command, 0),
		{{- if .TargetBotIDs }}
		TargetBotIDs: []entity.BotID{
			{{- range .TargetBotIDs }}
			entity.BotID_{{ . | botIDName }},
			{{- end }}
		},
		{{- else }}
		TargetBotIDs: entity.AllBotIDs(),
		{{- end }}
	}

	c.{{.Name}}SubCmds = c.buildSubCmds()

{{- $cmdName := .Name }}
{{ range .SubCommands }}
	{{$cmdName}}Cmd.AddSubCommand(c.subCmd{{.Name | title}})
{{- end}}

	return {{.Name}}Cmd
}
