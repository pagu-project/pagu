// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/nowpayments/interface.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/nowpayments/interface.go -destination=./pkg/nowpayments/mock.go -package=nowpayments
//

// Package nowpayments is a generated GoMock package.
package nowpayments

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockINowPayments is a mock of INowPayments interface.
type MockINowPayments struct {
	ctrl     *gomock.Controller
	recorder *MockINowPaymentsMockRecorder
	isgomock struct{}
}

// MockINowPaymentsMockRecorder is the mock recorder for MockINowPayments.
type MockINowPaymentsMockRecorder struct {
	mock *MockINowPayments
}

// NewMockINowPayments creates a new mock instance.
func NewMockINowPayments(ctrl *gomock.Controller) *MockINowPayments {
	mock := &MockINowPayments{ctrl: ctrl}
	mock.recorder = &MockINowPaymentsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockINowPayments) EXPECT() *MockINowPaymentsMockRecorder {
	return m.recorder
}

// CreateInvoice mocks base method.
func (m *MockINowPayments) CreateInvoice(priceUSD int, orderID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvoice", priceUSD, orderID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvoice indicates an expected call of CreateInvoice.
func (mr *MockINowPaymentsMockRecorder) CreateInvoice(priceUSD, orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvoice", reflect.TypeOf((*MockINowPayments)(nil).CreateInvoice), priceUSD, orderID)
}

// IsPaid mocks base method.
func (m *MockINowPayments) IsPaid(invoiceID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPaid", invoiceID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPaid indicates an expected call of IsPaid.
func (mr *MockINowPaymentsMockRecorder) IsPaid(invoiceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPaid", reflect.TypeOf((*MockINowPayments)(nil).IsPaid), invoiceID)
}

// PaymentLink mocks base method.
func (m *MockINowPayments) PaymentLink(invoiceID string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaymentLink", invoiceID)
	ret0, _ := ret[0].(string)
	return ret0
}

// PaymentLink indicates an expected call of PaymentLink.
func (mr *MockINowPaymentsMockRecorder) PaymentLink(invoiceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaymentLink", reflect.TypeOf((*MockINowPayments)(nil).PaymentLink), invoiceID)
}
