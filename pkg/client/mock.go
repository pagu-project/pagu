// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/client/interface.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/client/interface.go -destination=./pkg/client/mock.go -package=client
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	pactus "github.com/pactus-project/pactus/www/grpc/gen/go"
	gomock "go.uber.org/mock/gomock"
)

// MockIClient is a mock of IClient interface.
type MockIClient struct {
	ctrl     *gomock.Controller
	recorder *MockIClientMockRecorder
	isgomock struct{}
}

// MockIClientMockRecorder is the mock recorder for MockIClient.
type MockIClientMockRecorder struct {
	mock *MockIClient
}

// NewMockIClient creates a new mock instance.
func NewMockIClient(ctrl *gomock.Controller) *MockIClient {
	mock := &MockIClient{ctrl: ctrl}
	mock.recorder = &MockIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClient) EXPECT() *MockIClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIClient)(nil).Close))
}

// GetBalance mocks base method.
func (m *MockIClient) GetBalance(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockIClientMockRecorder) GetBalance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockIClient)(nil).GetBalance), arg0, arg1)
}

// GetBlockchainHeight mocks base method.
func (m *MockIClient) GetBlockchainHeight(arg0 context.Context) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockchainHeight", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainHeight indicates an expected call of GetBlockchainHeight.
func (mr *MockIClientMockRecorder) GetBlockchainHeight(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainHeight", reflect.TypeOf((*MockIClient)(nil).GetBlockchainHeight), arg0)
}

// GetBlockchainInfo mocks base method.
func (m *MockIClient) GetBlockchainInfo(arg0 context.Context) (*pactus.GetBlockchainInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockchainInfo", arg0)
	ret0, _ := ret[0].(*pactus.GetBlockchainInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainInfo indicates an expected call of GetBlockchainInfo.
func (mr *MockIClientMockRecorder) GetBlockchainInfo(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainInfo", reflect.TypeOf((*MockIClient)(nil).GetBlockchainInfo), arg0)
}

// GetFee mocks base method.
func (m *MockIClient) GetFee(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFee", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFee indicates an expected call of GetFee.
func (mr *MockIClientMockRecorder) GetFee(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFee", reflect.TypeOf((*MockIClient)(nil).GetFee), arg0, arg1)
}

// GetLastBlockTime mocks base method.
func (m *MockIClient) GetLastBlockTime(arg0 context.Context) (uint32, uint32) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastBlockTime", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(uint32)
	return ret0, ret1
}

// GetLastBlockTime indicates an expected call of GetLastBlockTime.
func (mr *MockIClientMockRecorder) GetLastBlockTime(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastBlockTime", reflect.TypeOf((*MockIClient)(nil).GetLastBlockTime), arg0)
}

// GetNetworkInfo mocks base method.
func (m *MockIClient) GetNetworkInfo(arg0 context.Context) (*pactus.GetNetworkInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkInfo", arg0)
	ret0, _ := ret[0].(*pactus.GetNetworkInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkInfo indicates an expected call of GetNetworkInfo.
func (mr *MockIClientMockRecorder) GetNetworkInfo(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkInfo", reflect.TypeOf((*MockIClient)(nil).GetNetworkInfo), arg0)
}

// GetTransactionData mocks base method.
func (m *MockIClient) GetTransactionData(arg0 context.Context, arg1 string) (*pactus.GetTransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionData", arg0, arg1)
	ret0, _ := ret[0].(*pactus.GetTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionData indicates an expected call of GetTransactionData.
func (mr *MockIClientMockRecorder) GetTransactionData(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionData", reflect.TypeOf((*MockIClient)(nil).GetTransactionData), arg0, arg1)
}

// GetValidatorInfo mocks base method.
func (m *MockIClient) GetValidatorInfo(arg0 context.Context, arg1 string) (*pactus.GetValidatorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorInfo", arg0, arg1)
	ret0, _ := ret[0].(*pactus.GetValidatorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorInfo indicates an expected call of GetValidatorInfo.
func (mr *MockIClientMockRecorder) GetValidatorInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorInfo", reflect.TypeOf((*MockIClient)(nil).GetValidatorInfo), arg0, arg1)
}

// GetValidatorInfoByNumber mocks base method.
func (m *MockIClient) GetValidatorInfoByNumber(arg0 context.Context, arg1 int32) (*pactus.GetValidatorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorInfoByNumber", arg0, arg1)
	ret0, _ := ret[0].(*pactus.GetValidatorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorInfoByNumber indicates an expected call of GetValidatorInfoByNumber.
func (mr *MockIClientMockRecorder) GetValidatorInfoByNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorInfoByNumber", reflect.TypeOf((*MockIClient)(nil).GetValidatorInfoByNumber), arg0, arg1)
}

// Target mocks base method.
func (m *MockIClient) Target() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Target")
	ret0, _ := ret[0].(string)
	return ret0
}

// Target indicates an expected call of Target.
func (mr *MockIClientMockRecorder) Target() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Target", reflect.TypeOf((*MockIClient)(nil).Target))
}

// MockIManager is a mock of IManager interface.
type MockIManager struct {
	ctrl     *gomock.Controller
	recorder *MockIManagerMockRecorder
	isgomock struct{}
}

// MockIManagerMockRecorder is the mock recorder for MockIManager.
type MockIManagerMockRecorder struct {
	mock *MockIManager
}

// NewMockIManager creates a new mock instance.
func NewMockIManager(ctrl *gomock.Controller) *MockIManager {
	mock := &MockIManager{ctrl: ctrl}
	mock.recorder = &MockIManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIManager) EXPECT() *MockIManagerMockRecorder {
	return m.recorder
}

// AddClient mocks base method.
func (m *MockIManager) AddClient(c IClient) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddClient", c)
}

// AddClient indicates an expected call of AddClient.
func (mr *MockIManagerMockRecorder) AddClient(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClient", reflect.TypeOf((*MockIManager)(nil).AddClient), c)
}

// FindPublicKey mocks base method.
func (m *MockIManager) FindPublicKey(address string, firstVal bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPublicKey", address, firstVal)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPublicKey indicates an expected call of FindPublicKey.
func (mr *MockIManagerMockRecorder) FindPublicKey(address, firstVal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPublicKey", reflect.TypeOf((*MockIManager)(nil).FindPublicKey), address, firstVal)
}

// GetBalance mocks base method.
func (m *MockIManager) GetBalance(addr string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", addr)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockIManagerMockRecorder) GetBalance(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockIManager)(nil).GetBalance), addr)
}

// GetBlockchainHeight mocks base method.
func (m *MockIManager) GetBlockchainHeight() (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockchainHeight")
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainHeight indicates an expected call of GetBlockchainHeight.
func (mr *MockIManagerMockRecorder) GetBlockchainHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainHeight", reflect.TypeOf((*MockIManager)(nil).GetBlockchainHeight))
}

// GetBlockchainInfo mocks base method.
func (m *MockIManager) GetBlockchainInfo() (*pactus.GetBlockchainInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockchainInfo")
	ret0, _ := ret[0].(*pactus.GetBlockchainInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainInfo indicates an expected call of GetBlockchainInfo.
func (mr *MockIManagerMockRecorder) GetBlockchainInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainInfo", reflect.TypeOf((*MockIManager)(nil).GetBlockchainInfo))
}

// GetCirculatingSupply mocks base method.
func (m *MockIManager) GetCirculatingSupply() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCirculatingSupply")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetCirculatingSupply indicates an expected call of GetCirculatingSupply.
func (mr *MockIManagerMockRecorder) GetCirculatingSupply() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCirculatingSupply", reflect.TypeOf((*MockIManager)(nil).GetCirculatingSupply))
}

// GetFee mocks base method.
func (m *MockIManager) GetFee(amt int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFee", amt)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFee indicates an expected call of GetFee.
func (mr *MockIManagerMockRecorder) GetFee(amt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFee", reflect.TypeOf((*MockIManager)(nil).GetFee), amt)
}

// GetLastBlockTime mocks base method.
func (m *MockIManager) GetLastBlockTime() (uint32, uint32) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastBlockTime")
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(uint32)
	return ret0, ret1
}

// GetLastBlockTime indicates an expected call of GetLastBlockTime.
func (mr *MockIManagerMockRecorder) GetLastBlockTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastBlockTime", reflect.TypeOf((*MockIManager)(nil).GetLastBlockTime))
}

// GetLocalClient mocks base method.
func (m *MockIManager) GetLocalClient() IClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalClient")
	ret0, _ := ret[0].(IClient)
	return ret0
}

// GetLocalClient indicates an expected call of GetLocalClient.
func (mr *MockIManagerMockRecorder) GetLocalClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalClient", reflect.TypeOf((*MockIManager)(nil).GetLocalClient))
}

// GetNetworkInfo mocks base method.
func (m *MockIManager) GetNetworkInfo() (*pactus.GetNetworkInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkInfo")
	ret0, _ := ret[0].(*pactus.GetNetworkInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkInfo indicates an expected call of GetNetworkInfo.
func (mr *MockIManagerMockRecorder) GetNetworkInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkInfo", reflect.TypeOf((*MockIManager)(nil).GetNetworkInfo))
}

// GetPeerInfo mocks base method.
func (m *MockIManager) GetPeerInfo(address string) (*pactus.PeerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeerInfo", address)
	ret0, _ := ret[0].(*pactus.PeerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeerInfo indicates an expected call of GetPeerInfo.
func (mr *MockIManagerMockRecorder) GetPeerInfo(address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeerInfo", reflect.TypeOf((*MockIManager)(nil).GetPeerInfo), address)
}

// GetRandomClient mocks base method.
func (m *MockIManager) GetRandomClient() IClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomClient")
	ret0, _ := ret[0].(IClient)
	return ret0
}

// GetRandomClient indicates an expected call of GetRandomClient.
func (mr *MockIManagerMockRecorder) GetRandomClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomClient", reflect.TypeOf((*MockIManager)(nil).GetRandomClient))
}

// GetTransactionData mocks base method.
func (m *MockIManager) GetTransactionData(txID string) (*pactus.GetTransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionData", txID)
	ret0, _ := ret[0].(*pactus.GetTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionData indicates an expected call of GetTransactionData.
func (mr *MockIManagerMockRecorder) GetTransactionData(txID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionData", reflect.TypeOf((*MockIManager)(nil).GetTransactionData), txID)
}

// GetValidatorInfo mocks base method.
func (m *MockIManager) GetValidatorInfo(address string) (*pactus.GetValidatorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorInfo", address)
	ret0, _ := ret[0].(*pactus.GetValidatorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorInfo indicates an expected call of GetValidatorInfo.
func (mr *MockIManagerMockRecorder) GetValidatorInfo(address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorInfo", reflect.TypeOf((*MockIManager)(nil).GetValidatorInfo), address)
}

// GetValidatorInfoByNumber mocks base method.
func (m *MockIManager) GetValidatorInfoByNumber(num int32) (*pactus.GetValidatorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorInfoByNumber", num)
	ret0, _ := ret[0].(*pactus.GetValidatorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorInfoByNumber indicates an expected call of GetValidatorInfoByNumber.
func (mr *MockIManagerMockRecorder) GetValidatorInfoByNumber(num any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorInfoByNumber", reflect.TypeOf((*MockIManager)(nil).GetValidatorInfoByNumber), num)
}

// Start mocks base method.
func (m *MockIManager) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockIManagerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockIManager)(nil).Start))
}

// Stop mocks base method.
func (m *MockIManager) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockIManagerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockIManager)(nil).Stop))
}
