// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/mailer/interface.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/mailer/interface.go -destination=./pkg/mailer/mock.go -package=mailer
//

// Package mailer is a generated GoMock package.
package mailer

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIMailer is a mock of IMailer interface.
type MockIMailer struct {
	ctrl     *gomock.Controller
	recorder *MockIMailerMockRecorder
	isgomock struct{}
}

// MockIMailerMockRecorder is the mock recorder for MockIMailer.
type MockIMailerMockRecorder struct {
	mock *MockIMailer
}

// NewMockIMailer creates a new mock instance.
func NewMockIMailer(ctrl *gomock.Controller) *MockIMailer {
	mock := &MockIMailer{ctrl: ctrl}
	mock.recorder = &MockIMailerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMailer) EXPECT() *MockIMailerMockRecorder {
	return m.recorder
}

// SendTemplateMail mocks base method.
func (m *MockIMailer) SendTemplateMail(email, templatePath string, data map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTemplateMail", email, templatePath, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTemplateMail indicates an expected call of SendTemplateMail.
func (mr *MockIMailerMockRecorder) SendTemplateMail(email, templatePath, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTemplateMail", reflect.TypeOf((*MockIMailer)(nil).SendTemplateMail), email, templatePath, data)
}

// SendTemplateMailAsync mocks base method.
func (m *MockIMailer) SendTemplateMailAsync(email, templatePath string, data map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTemplateMailAsync", email, templatePath, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTemplateMailAsync indicates an expected call of SendTemplateMailAsync.
func (mr *MockIMailerMockRecorder) SendTemplateMailAsync(email, templatePath, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTemplateMailAsync", reflect.TypeOf((*MockIMailer)(nil).SendTemplateMailAsync), email, templatePath, data)
}
